@using System.Collections.Specialized
@using Microsoft.EntityFrameworkCore.Scaffolding
@model Mvc1VaccinDemo.ViewModels.PersonIndexViewModel

@{
    ViewData["Title"] = "Personer";
}


<div id="jsGrid"></div>



@section Scripts
{
    <script>


        $("#jsGrid").jsGrid({
            width: "100%",
            height: "400px",
            autoload: false,
            inserting: false,
            editing: false,
            sorting: true,
            paging: true,
            pageLoading: true,
            filtering: true,
            rowDoubleClick: function (args) { window.location.href = "/Person/Edit?id=" + args.item.id; },
            pageSize: 10,
            pageButtonCount: 5,

            controller: {
                loadData: function (filter) {
                    return $.ajax({
                        type: "GET",
                        url: "/Person/PersonDataSource",
                        data: this.saveAndGet(filter),
                        dataType: "json"
                    });
                },
                saveAndGet: function (filter) {
                    localStorage.setItem(window.location.href, JSON.stringify(filter));
                    console.log(filter);
                    return filter;
                },



            },

            fields: [
                { name: "id", type: "text", width: 150, visible: false },
                { name: "name", type: "text", width: 190, validate: "required", filterTemplate: createTextFilterTemplate("name") },
                { name: "personalNumber", type: "text", width: 190, validate: "required", filterTemplate: createTextFilterTemplate("personalNumber") },
                { name: "postalCode", title: "Åldrer", type: "text", width: 200, filterTemplate: createTextFilterTemplate("postalCode") },
            ]
        });

        var grid = $("#jsGrid").data("JSGrid");
        var existing = JSON.parse(localStorage.getItem(window.location.href));
        var urlParams = new URLSearchParams(window.location.search);
        if (!urlParams.has('keepState')) existing = null;

        if (existing)
            grid.option("pageIndex", existing.pageIndex);
        if (existing)
            grid.sort({
                field: existing.sortField,
                order: existing.sortOrder
            });
        else
            grid.sort();

        function createTextFilterTemplate(propertyName) {
            return function () {
                if (!this.filtering)
                    return "";
                var existing = JSON.parse(localStorage.getItem(window.location.href));

                var grid = this._grid,
                    $result = this.filterControl = this._createTextBox();
                if (this.autosearch) {
                    $result.on("keypress",
                        function (e) {
                            if (e.which === 13) {
                                grid.search();
                                e.preventDefault();
                            }
                        });
                }
                var gridFilter = existing;
                if (gridFilter && gridFilter[propertyName]) {
                    $result.val(gridFilter[propertyName]);
                }

                return $result;
            }
        }



    </script>    
}
